Uncollectable garbage
---------------------

Objects that have a __del__ method

    >>> class Nondestructible(list):
    ...     def __del__(self):
    ...         pass

    >>> x = Nondestructible()
    >>> y = []
    >>> z = []
    >>> x.append(y)
    >>> y.append(z)
    >>> z.append(x)
    >>> del x, y, z

    >>> import objgraph
    >>> objgraph.show_backrefs(objgraph.by_type('Nondestructible'),
    ...                        filename='finalizers.png')
    Graph written to ....dot (3 nodes)
    Image generated as finalizers.png

.. image:: finalizers.png

Note that classes that *define* a __del__ method do not have this indicator

    >>> objgraph.show_refs(Nondestructible, max_depth=1,
    ...                    filename='class-with-finalizers.png')
    Graph written to ....dot (5 nodes)
    Image generated as class-with-finalizers.png

.. image:: class-with-finalizers.png


Too many references
-------------------

Objects that have too many references are truncated

    >>> objgraph.show_refs([range(12)], too_many=10, filename='too-many.png')
    Graph written to ....dot (11 nodes)
    Image generated as too-many.png

.. image:: too-many.png

The same sort of thing applies to backreferences

    >>> moo = 'moo'
    >>> refs_to_moo = [[moo] for n in range(42)]
    >>> objgraph.show_backrefs([moo], too_many=5, max_depth=1, filename='42.png')
    Graph written to ....dot (6 nodes)
    Image generated as 42.png

.. image:: 42.png

